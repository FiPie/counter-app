{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","console","log","className","href","Counter","prevProps","prevState","counter","value","this","props","Fragment","id","src","imgUrl","alt","getBadgeClasses","formatCount","onClick","onIncrement","onDelete","classes","count","Component","Counters","onReset","counters","map","key","App","state","handleIncrement","index","indexOf","setState","handleReset","c","getImages","handleDelete","counterId","filter","Math","floor","random","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27858555.chunk.js","sourcesContent":["import React from \"react\";\n/*Stateless Functional Component - no state, no lifecycle components*/\nconst NavBar = ({ totalCounters }) => {\n  console.log(\"NavBar - Rendered\");\n\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        Navbar{\" \"}\n        <span className=\"badge badge-pill badge-secondary\">\n          {totalCounters}\n        </span>\n      </a>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  /*Props include data that we give to the component, whereas\n  State inlcudes data that is local or private to that component\n  so that other components cannot access that state \n  */\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"prevProps\", prevProps);\n    console.log(\"prevState\", prevState);\n    if (prevProps.counter.value !== this.props.counter.value) {\n      /*based on the changes in prevProps or prevState we may \n      want to issue an Ajax call to get new data from the server\n      */\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"Counter - Unmounted\");\n  }\n\n  render() {\n    /*Every React component has a property called props which is \n    a plain JS object that icludes all the attributes that we set*/\n    // console.log(\"props\", this.props);\n    console.log(\"Counter - Rendered\");\n\n    return (\n      <React.Fragment>\n        <h4>{this.props.id}</h4>\n        <img\n          src={this.props.counter.imgUrl}\n          alt={\"id:\" + this.props.counter.id}\n        />\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() =>\n            this.props.onDelete(this.props.counter.id)\n          } /*Counter component is rising the event to its parent components */\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n      </React.Fragment>\n    );\n  }\n\n  // getImgUrl = () => {\n  //   const imgUrl = \"https://picsum.photos/30\";\n  //   this.setState({ imgUrl: imgUrl });\n  // };\n\n  getBadgeClasses() {\n    /*Changes badge bootstrap class and hence its colour */\n    let classes = \"badge m-2 badge-\";\n    /*Depending on the count state value classes is appended accordingly */\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    /*Object destructuring of this.state to pick the count property from state*/\n    const { value: count } = this.props.counter;\n    /*Depending on count the value displayed on the button is updated */\n    return count === 0 ? \"Zero\" : count;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  /*A component without its own state is called 'Controlled Component'\n  and it recieves all its data from it parent component through \n  props and rises all its event to a parent component that controlls it \n  */\n  render() {\n    console.log(\"Counters - Rendered\");\n\n    /*Object Deconstructuring - to pick the properties of the props object we're interested in*/\n    const { onReset, counters, onDelete, onIncrement } = this.props;\n\n    return (\n      <div>\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\n          Reset\n        </button>\n        {counters.map(counter => (\n          /*These attributes are part of the props */\n          <Counter\n            key={counter.id}\n            onDelete={onDelete}\n            onIncrement={onIncrement}\n            counter={counter}\n            /*we can pass the whole counter object with its properties */\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport \"./App.css\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  /*Here we also have App's component local state \n  which is completely invisible to other components */\n  state = {\n    counters: [\n      { id: 1, value: 0, imgUrl: \"\" },\n      { id: 2, value: 1, imgUrl: \"\" },\n      { id: 3, value: 0, imgUrl: \"\" },\n      { id: 4, value: 0, imgUrl: \"\" },\n      { id: 5, value: 0, imgUrl: \"\" },\n      { id: 6, value: 0, imgUrl: \"\" }\n    ]\n  };\n\n  constructor() {\n    super();\n    console.log(\"App - Constructor\");\n    this.state.counters.map(c => {\n      /*TODO: fix? I know the ids might repeat here but it's only a demo so chillax*/\n      c.id = Math.floor(Math.random() * (+1084 - 1)) + 1;\n      c.imgUrl = \"https://picsum.photos/id/\" + c.id + \"/40/40\";\n      return c;\n    });\n    /*We asign below imgUrls to each counter from photostock \n    picsum, accordingly to seed on counter.id */\n  }\n  componentDidMount() {\n    //Ajax Call\n    console.log(\"App - Mounted\");\n  }\n\n  handleIncrement = counter => {\n    console.log(\"handleIncrement called\");\n\n    /*using the spread operator ... we're cloning the existing counter array */\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters: counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters: counters });\n  };\n\n  getImages = () => {\n    console.log(\"getImages called\");\n    const counters = this.state.counters.map(c => {\n      c.imgUrl = \"https://picsum.photos/30\";\n      return c;\n    });\n    this.setState({ counters: counters });\n  };\n\n  /*Since the state of id is in this component, the handling\n   of the onDelete event rised from Counter component happens \n   here*/\n  handleDelete = counterId => {\n    // console.log(\"onDelete Event Handler Called\", counterId);\n    /*We create a new array with counter and filter away the one\n     with id matching the one to be deleted */\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    /*We set the state.counters array with our modified array \n    effectively overwriting it*/\n    this.setState({ counters: counters });\n  };\n  render() {\n    console.log(\"App - Rendered\");\n\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}